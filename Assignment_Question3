import threading
import random
import time

# Part A: Function to generate 100 random numbers
def generate_random_numbers():
    return [random.randint(0, 10000) for _ in range(100)]

# Multithreading worker
def thread_task(result_list, index):
    result_list[index] = generate_random_numbers()

# Part B: Generate 3 sets using multithreading
def run_multithreading():
    results = [None, None, None]
    threads = []

    start_time = time.perf_counter_ns()

    for i in range(3):
        t = threading.Thread(target=thread_task, args=(results, i))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    end_time = time.perf_counter_ns()
    return end_time - start_time

# Non-multithreaded version
def run_non_multithreading():
    start_time = time.perf_counter_ns()

    results = []
    for _ in range(3):
        results.append(generate_random_numbers())

    end_time = time.perf_counter_ns()
    return end_time - start_time

# Main program
def main():
    rounds = 10
    mt_times = []
    nmt_times = []
    differences = []

    print("\nPerformance Comparison: Multithreading vs Non-Multithreading")
    print("-" * 90)
    print(f"{'Round':<12}{'Multithreading (ns)':<30}{'Non-Multithreading (ns)':<30}{'Difference (ns)':<30}")
    print("-" * 90)

    for i in range(1, rounds + 1):
        mt_time = run_multithreading()
        nmt_time = run_non_multithreading()
        diff = abs(mt_time - nmt_time)

        mt_times.append(mt_time)
        nmt_times.append(nmt_time)
        differences.append(diff)

        print(f"{i:<12}{mt_time:<30,}{nmt_time:<30,}{diff:<30,}")

    total_mt = sum(mt_times)
    total_nmt = sum(nmt_times)
    avg_mt = total_mt / rounds
    avg_nmt = total_nmt / rounds
    total_diff = sum(differences)
    avg_diff = total_diff / rounds

    print("-" * 90)
    print(f"{'TOTAL':<12}{total_mt:<30,}{total_nmt:<30,}{total_diff:<30,}")
    print(f"{'AVERAGE':<12}{avg_mt:<30,.2f}{avg_nmt:<30,.2f}{avg_diff:<30,.2f}")
    print("-" * 90)

if __name__ == "__main__":
    main()

